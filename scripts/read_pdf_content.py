import json
from ast import literal_eval
from datetime import datetime
from os.path import join
from typing import Optional, Dict

import pandas as pd

from datasource.utils import get_logger
from scripts.clean_pdf import get_clean_text
from scripts.read_pdf_files import get_pdf_content_from_url

# directory to csv generated by scrap_pdf_files.py

logger = get_logger("COMPUTE_PDF_CONTENT")


def compute_pdf_content(
        directory: str,
        csv: str,
        nb_samples: Optional[int] = None,
        debug_print: bool = False
):

    """
    Notes:
    1/ Aide name is not unique --> use a different key
        See: Soutenir les investissements relatifs aux projets de transformation et de commercialisation des produits agricoles
    2/ Aide name might contain "/": impossible to process as a file name
        See: Réaliser une étude de zonage d’assainissement collectif / non-collectif
    """

    path_to_csv = join(directory, csv)
    data = pd.read_csv(path_to_csv)

    data_with_pdf: pd.DataFrame = data[data['pdfs'] != '[]']

    sample_data: pd.DataFrame
    if nb_samples is None:
        sample_data = data_with_pdf.copy()
    else:
        sample_data = data_with_pdf.sample(nb_samples)

    content_dict: Dict[str, Dict[str, str]] = {}
    path = join(directory, csv.strip(".csv") + '.json')

    for idx, row in sample_data.iterrows():

        aide_name = row['name']  # nom de l'aide
        aide_id = row["id"]
        pdfs_list = literal_eval(row['pdfs'])  # liste des urls des pdfs associés à l'aide

        logger.debug(f"Extracting id: {aide_id}, name: {aide_name}")
        if content_dict.get(aide_id, None) is not None:
            raise Exception(f"Multiple content keys: {aide_id}")

        content_dict[aide_id] = {
            "name": aide_name,
            "content": {}
        }

        for url in pdfs_list:
            content = get_pdf_content_from_url(url)
            content_dict[aide_id]["content"][url] = get_clean_text(
                input_text=content,
                debug_print=debug_print
            )

    with open(path, "w") as f:
        json.dump(content_dict, f)
